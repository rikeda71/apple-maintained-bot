// Code generated by MockGen. DO NOT EDIT.
// Source: page_parser.go

// Package parser is a generated GoMock package.
package parser

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/s14t284/apple-maitained-bot/domain/model"
	reflect "reflect"
)

// MockIParser is a mock of IParser interface
type MockIParser struct {
	ctrl     *gomock.Controller
	recorder *MockIParserMockRecorder
}

// MockIParserMockRecorder is the mock recorder for MockIParser
type MockIParserMockRecorder struct {
	mock *MockIParser
}

// NewMockIParser creates a new mock instance
func NewMockIParser(ctrl *gomock.Controller) *MockIParser {
	mock := &MockIParser{ctrl: ctrl}
	mock.recorder = &MockIParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIParser) EXPECT() *MockIParserMockRecorder {
	return m.recorder
}

// ParseMacPage mocks base method
func (m *MockIParser) ParseMacPage() (*model.Mac, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMacPage")
	ret0, _ := ret[0].(*model.Mac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMacPage indicates an expected call of ParseMacPage
func (mr *MockIParserMockRecorder) ParseMacPage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMacPage", reflect.TypeOf((*MockIParser)(nil).ParseMacPage))
}

// ParseIPadPage mocks base method
func (m *MockIParser) ParseIPadPage() (*model.IPad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIPadPage")
	ret0, _ := ret[0].(*model.IPad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIPadPage indicates an expected call of ParseIPadPage
func (mr *MockIParserMockRecorder) ParseIPadPage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIPadPage", reflect.TypeOf((*MockIParser)(nil).ParseIPadPage))
}

// ParseWatchPage mocks base method
func (m *MockIParser) ParseWatchPage() (*model.Watch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWatchPage")
	ret0, _ := ret[0].(*model.Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWatchPage indicates an expected call of ParseWatchPage
func (mr *MockIParserMockRecorder) ParseWatchPage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWatchPage", reflect.TypeOf((*MockIParser)(nil).ParseWatchPage))
}
