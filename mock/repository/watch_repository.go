// Code generated by MockGen. DO NOT EDIT.
// Source: watch_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/s14t284/apple-maitained-bot/domain/model"
	reflect "reflect"
	time "time"
)

// MockWatchRepository is a mock of WatchRepository interface
type MockWatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWatchRepositoryMockRecorder
}

// MockWatchRepositoryMockRecorder is the mock recorder for MockWatchRepository
type MockWatchRepositoryMockRecorder struct {
	mock *MockWatchRepository
}

// NewMockWatchRepository creates a new mock instance
func NewMockWatchRepository(ctrl *gomock.Controller) *MockWatchRepository {
	mock := &MockWatchRepository{ctrl: ctrl}
	mock.recorder = &MockWatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatchRepository) EXPECT() *MockWatchRepositoryMockRecorder {
	return m.recorder
}

// FindWatchAll mocks base method
func (m *MockWatchRepository) FindWatchAll() (model.Watches, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWatchAll")
	ret0, _ := ret[0].(model.Watches)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWatchAll indicates an expected call of FindWatchAll
func (mr *MockWatchRepositoryMockRecorder) FindWatchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWatchAll", reflect.TypeOf((*MockWatchRepository)(nil).FindWatchAll))
}

// FindByURL mocks base method
func (m *MockWatchRepository) FindByURL(url string) (*model.Watch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByURL", url)
	ret0, _ := ret[0].(*model.Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByURL indicates an expected call of FindByURL
func (mr *MockWatchRepositoryMockRecorder) FindByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByURL", reflect.TypeOf((*MockWatchRepository)(nil).FindByURL), url)
}

// IsExist mocks base method
func (m *MockWatchRepository) IsExist(watch *model.Watch) (bool, uint, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", watch)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// IsExist indicates an expected call of IsExist
func (mr *MockWatchRepositoryMockRecorder) IsExist(watch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockWatchRepository)(nil).IsExist), watch)
}

// AddWatch mocks base method
func (m *MockWatchRepository) AddWatch(watch *model.Watch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWatch", watch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWatch indicates an expected call of AddWatch
func (mr *MockWatchRepositoryMockRecorder) AddWatch(watch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWatch", reflect.TypeOf((*MockWatchRepository)(nil).AddWatch), watch)
}

// UpdateWatch mocks base method
func (m *MockWatchRepository) UpdateWatch(watch *model.Watch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWatch", watch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWatch indicates an expected call of UpdateWatch
func (mr *MockWatchRepositoryMockRecorder) UpdateWatch(watch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWatch", reflect.TypeOf((*MockWatchRepository)(nil).UpdateWatch), watch)
}

// UpdateAllSoldTemporary mocks base method
func (m *MockWatchRepository) UpdateAllSoldTemporary() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSoldTemporary")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSoldTemporary indicates an expected call of UpdateAllSoldTemporary
func (mr *MockWatchRepositoryMockRecorder) UpdateAllSoldTemporary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSoldTemporary", reflect.TypeOf((*MockWatchRepository)(nil).UpdateAllSoldTemporary))
}

// RemoveWatch mocks base method
func (m *MockWatchRepository) RemoveWatch(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWatch", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWatch indicates an expected call of RemoveWatch
func (mr *MockWatchRepositoryMockRecorder) RemoveWatch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWatch", reflect.TypeOf((*MockWatchRepository)(nil).RemoveWatch), id)
}
