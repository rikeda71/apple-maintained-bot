// Code generated by MockGen. DO NOT EDIT.
// Source: mac_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/s14t284/apple-maitained-bot/domain/model"
	reflect "reflect"
	time "time"
)

// MockMacRepository is a mock of MacRepository interface
type MockMacRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMacRepositoryMockRecorder
}

// MockMacRepositoryMockRecorder is the mock recorder for MockMacRepository
type MockMacRepositoryMockRecorder struct {
	mock *MockMacRepository
}

// NewMockMacRepository creates a new mock instance
func NewMockMacRepository(ctrl *gomock.Controller) *MockMacRepository {
	mock := &MockMacRepository{ctrl: ctrl}
	mock.recorder = &MockMacRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMacRepository) EXPECT() *MockMacRepositoryMockRecorder {
	return m.recorder
}

// FindMac mocks base method
func (m *MockMacRepository) FindMac(arg0 *model.Mac) (model.Macs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMac", arg0)
	ret0, _ := ret[0].(model.Macs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMac indicates an expected call of FindMac
func (mr *MockMacRepositoryMockRecorder) FindMac(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMac", reflect.TypeOf((*MockMacRepository)(nil).FindMac), arg0)
}

// FindMacAll mocks base method
func (m *MockMacRepository) FindMacAll() (model.Macs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMacAll")
	ret0, _ := ret[0].(model.Macs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMacAll indicates an expected call of FindMacAll
func (mr *MockMacRepositoryMockRecorder) FindMacAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMacAll", reflect.TypeOf((*MockMacRepository)(nil).FindMacAll))
}

// FindByURL mocks base method
func (m *MockMacRepository) FindByURL(url string) (*model.Mac, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByURL", url)
	ret0, _ := ret[0].(*model.Mac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByURL indicates an expected call of FindByURL
func (mr *MockMacRepositoryMockRecorder) FindByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByURL", reflect.TypeOf((*MockMacRepository)(nil).FindByURL), url)
}

// IsExist mocks base method
func (m *MockMacRepository) IsExist(mac *model.Mac) (bool, uint, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", mac)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// IsExist indicates an expected call of IsExist
func (mr *MockMacRepositoryMockRecorder) IsExist(mac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockMacRepository)(nil).IsExist), mac)
}

// AddMac mocks base method
func (m *MockMacRepository) AddMac(mac *model.Mac) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMac", mac)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMac indicates an expected call of AddMac
func (mr *MockMacRepositoryMockRecorder) AddMac(mac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMac", reflect.TypeOf((*MockMacRepository)(nil).AddMac), mac)
}

// UpdateMac mocks base method
func (m *MockMacRepository) UpdateMac(mac *model.Mac) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMac", mac)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMac indicates an expected call of UpdateMac
func (mr *MockMacRepositoryMockRecorder) UpdateMac(mac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMac", reflect.TypeOf((*MockMacRepository)(nil).UpdateMac), mac)
}

// UpdateAllSoldTemporary mocks base method
func (m *MockMacRepository) UpdateAllSoldTemporary() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSoldTemporary")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSoldTemporary indicates an expected call of UpdateAllSoldTemporary
func (mr *MockMacRepositoryMockRecorder) UpdateAllSoldTemporary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSoldTemporary", reflect.TypeOf((*MockMacRepository)(nil).UpdateAllSoldTemporary))
}

// RemoveMac mocks base method
func (m *MockMacRepository) RemoveMac(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMac", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMac indicates an expected call of RemoveMac
func (mr *MockMacRepositoryMockRecorder) RemoveMac(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMac", reflect.TypeOf((*MockMacRepository)(nil).RemoveMac), id)
}
