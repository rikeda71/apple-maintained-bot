// Code generated by MockGen. DO NOT EDIT.
// Source: mac_usecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s14t284/apple-maitained-bot/domain/model"
)

// MockMacUseCase is a mock of MacUseCase interface.
type MockMacUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMacUseCaseMockRecorder
}

// MockMacUseCaseMockRecorder is the mock recorder for MockMacUseCase.
type MockMacUseCaseMockRecorder struct {
	mock *MockMacUseCase
}

// NewMockMacUseCase creates a new mock instance.
func NewMockMacUseCase(ctrl *gomock.Controller) *MockMacUseCase {
	mock := &MockMacUseCase{ctrl: ctrl}
	mock.recorder = &MockMacUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMacUseCase) EXPECT() *MockMacUseCaseMockRecorder {
	return m.recorder
}

// GetMacs mocks base method.
func (m *MockMacUseCase) GetMacs(mrp model.MacRequestParam) (model.Macs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMacs", mrp)
	ret0, _ := ret[0].(model.Macs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMacs indicates an expected call of GetMacs.
func (mr *MockMacUseCaseMockRecorder) GetMacs(mrp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMacs", reflect.TypeOf((*MockMacUseCase)(nil).GetMacs), mrp)
}
